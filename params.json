{"name":"SwiftData","tagline":"Simple and Effective SQLite Handling in Swift","body":"## SwiftData API Documentation\r\n\r\n### Public Functions\r\n\r\n***\r\n\r\n```\r\npublic static func executeChange(sqlStr: String) -> Int?\r\n```\r\n\r\nExecute a non-query SQL statement (e.g. INSERT, UPDATE, DELETE, etc.)\r\n\r\nThis function will execute the provided SQL and return an Int with the error code, or nil if there was no error.\r\nIt is recommended to always verify that the return value is nil to ensure that the operation was successful.\r\n    \r\nPossible errors returned by this function are:\r\n    \r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- sqlStr  -> The non-query string of SQL to be executed (INSERT, UPDATE, DELETE, etc.)\r\n\r\nReturns:\r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func executeChange(sqlStr: String, withArgs: [AnyObject?]) -> Int?\r\n```\r\n\r\nExecute a non-query SQL statement (e.g. INSERT, UPDATE, DELETE, etc.) along with arguments to be bound to the characters \"?\" (for values) and \"i?\" (for identifiers e.g. table or column names).\r\n    \r\nThe objects in the provided array of arguments will be bound, in order, to the \"i?\" and \"?\" characters in the SQL string. \r\nThe quantity of \"i?\"s and \"?\"s in the SQL string must be equal to the quantity of arguments provided.\r\nObjects that are to bind as an identifier (\"i?\") must be of type String. \r\nIdentifiers should be bound and escaped if provided by the user.\r\nIf \"nil\" is provided as an argument, the NULL value will be bound to the appropriate value in the SQL string.\r\nFor more information on how the objects will be escaped, refer to the functions \"escapeValue()\" and \"escapeIdentifier()\".\r\nNote that the \"escapeValue()\" and \"escapeIdentifier()\" include the necessary quotations ' ' or \" \" to the arguments when being bound to the SQL.\r\n\r\nIt is recommended to always verify that the return value is nil to ensure that the operation was successful.\r\n    \r\nPossible errors returned by this function are:\r\n    \r\n- SQLite errors (0 - 101)\r\n- binding errors (201 - 203)\r\n    \r\nParameters:\r\n- sqlStr  -> The non-query string of SQL to be executed (INSERT, UPDATE, DELETE, etc.)\r\n- withArgs  -> An array of objects to bind to the \"?\" and \"i?\" characters in the sqlStr\r\n    \r\nReturns:\r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func executeMultipleChanges(sqlArr: [String]) -> Int?\r\n```\r\n\r\nExecute multiple SQL statements (non-queries e.g. INSERT, UPDATE, DELETE, etc.)\r\n\r\nThis function will execute each SQL statment in the provided array, in order, and return an Int with the error code, or nil if there was no error.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- sqlArr  -> An array of non-query strings of SQL to be executed (INSERT, UPDATE, DELETE, etc.)\r\n    \r\nReturns:       \r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func executeQuery(sqlStr: String) -> (result: [SDRow], error: Int?)\r\n```\r\n\r\nExecute a SQLite query statement (e.g. SELECT)\r\n\r\nThis function will execute the provided SQL and return a tuple of:\r\n- an Array of SDRow objects\r\n- an Int with the error code, or nil if there was no error\r\n    \r\nThe value for each column in an SDRow can be obtained using the column name in the subscript format similar to a Dictionary, along with the function to obtain the value in the appropriate type (.asString(), .asDate(), .asData(), .asInt(), .asDouble(), and .asBool()).\r\nWithout the function call to return a specific type, the SDRow will return an object with type AnyObject.\r\nNote: NULL values in the SQLite database will be returned as 'nil'.\r\n    \r\nPossible errors returned by this function are:\r\n    \r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- sqlStr  -> The query String of SQL to be executed (e.g. SELECT)\r\n    \r\nReturns: \r\n- A tuple containing an Array of \"SDRow\"s, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func executeQuery(sqlStr: String, withArgs: [AnyObject?]) -> (result: [SDRow], error: Int?)\r\n```\r\n\r\nExecute a SQL query statement (e.g. SELECT) with arguments to be bound to the characters \"?\" (for values) and \"i?\" (for identifiers e.g. table or column names).\r\n    \r\nSee the \"executeChange(sqlStr: String, withArgs: [AnyObject?])\" function for more information on the arguments provided and binding.\r\n\r\nSee the \"executeQuery(sqlStr: String)\"  function for more information on the return value.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- binding errors (201 - 203)\r\n\r\nParameters:\r\n- sqlStr  -> The query String of SQL to be executed (e.g. SELECT)\r\n- withArgs  -> An array of objects that will be bound, in order, to the characters \"?\" (for values) and \"i?\" (for identifiers, e.g. table or column names) in the sqlStr.\r\n    \r\nReturns:      \r\n- A tuple containing an Array of \"SDRow\"s, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func executeWithConnection(flags: SD.Flags, closure: ()->Void) -> Int?\r\n```\r\n\r\nExecute functions in a closure on a single custom connection\r\n\r\nNote: This function cannot be nested within itself, or inside a transaction/savepoint.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- custom connection errors (301 - 306)\r\n\r\nParameters:\r\n- flags  -> The custom flag associated with the connection. Can be one of .ReadOnly, .ReadWrite, or .ReadWriteCreate\r\n- closure  -> A closure containing functions that will be executed on the custom connection\r\n\r\nReturns:    \r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func escapeValue(obj: AnyObject?) -> String\r\n```\r\n\r\nEscape an object to be inserted into a SQLite statement as a value\r\n    \r\nNOTE: Supported object types are: String, Int, Double, Bool, NSData, NSDate, and nil. All other data types will return the String value \"NULL\", and a warning message will be printed.\r\n    \r\nParameters:\r\n- obj  -> The value to be escaped\r\n    \r\nReturns:\r\n- The escaped value as a String, ready to be inserted into a SQL statement. Note: Single quotes (') will be placed around the entire value, if necessary.\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func escapeIdentifier(obj: String) -> String\r\n```\r\n\r\nEscape a string to be inserted into a SQLite statement as an indentifier (e.g. table or column name)\r\n    \r\nParameters:\r\n- obj  -> The identifier to be escaped. NOTE: This object must be of type String.\r\n    \r\nReturns: \r\n- The escaped identifier as a String, ready to be inserted into a SQL statement. Note: Double quotes (\") will be placed around the entire identifier.\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func createTable(table: String, withColumnNamesAndTypes: [String: SwiftData.DataType]) -> Int?\r\n```\r\n\r\nCreate A Table With The Provided Column Names and Types\r\n\r\nNote: The ID field is created automatically as \"INTEGER PRIMARY KEY AUTOINCREMENT\"\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nParameter:\r\n- table  -> The table name to be created\r\n- columnNamesAndTypes  -> A dictionary where the key = column name, and the value = data type\r\n    \r\nReturns: \r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func deleteTable(table: String) -> Int?\r\n```\r\n\r\nDelete a SQLite table by name\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- table  -> The table name to be deleted\r\n    \r\nReturns: \r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func existingTables() -> (result: [String], error: Int?)\r\n```\r\n\r\nObtain a list of the existing SQLite table names\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- Table query error (403)\r\n    \r\nReturns:\r\n- A tuple containing an Array of all existing SQLite table names, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func errorMessageForCode(code: Int) -> String\r\n```\r\n\r\nObtain the error message relating to the provided error code\r\n\r\nParameters:\r\n- code  -> The error code provided\r\n\r\nReturns: \r\n- The error message relating to the provided error code\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func databasePath() -> String\r\n```\r\n\r\nObtain the database path\r\n    \r\nReturns:  \r\n- The path to the SwiftData database\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func lastInsertedRowID() -> (rowID: Int, error: Int?)\r\n```\r\n\r\nObtain the last inserted row id\r\n\r\nNote: Care should be taken when the database is being accessed from multiple threads. The value could possibly return the last inserted row ID for another operation if another thread executes after your intended operation but before this function call.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nReturns:\r\n- A tuple of he ID of the last successfully inserted row's, and an Int of the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func numberOfRowsModified() -> (rowID: Int, error: Int?)\r\n```\r\n\r\nObtain the number of rows modified by the most recently completed SQLite statement (INSERT, UPDATE, or DELETE)\r\n\r\nNote: Care should be taken when the database is being accessed from multiple threads. The value could possibly return the number of rows modified for another operation if another thread executes after your intended operation but before this function call.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nReturns:\r\n- A tuple of the number of rows modified by the most recently completed SQLite statement, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func createIndex(#name: String, onColumns: [String], inTable: String, isUnique: Bool = false) -> Int?\r\n```\r\n\r\nCreate a SQLite index on the specified table and column(s)\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- Index error (401)\r\n    \r\nParameters:\r\n- name  -> The index name that is being created\r\n- onColumns  -> An array of column names that the index will be applied to (must be one column or greater)\r\n- inTable  -> The table name where the index is being created\r\n- isUnique  -> True if the index should be unique, false if it should not be unique (defaults to false)\r\n    \r\nReturns: \r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func removeIndex(indexName: String) -> Int?\r\n```\r\n\r\nRemove a SQLite index by its name\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- indexName  -> The name of the index to be removed\r\n    \r\nReturns:\r\n- An Int with the error code, or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func existingIndexes() -> (result: [String], error: Int?)\r\n```\r\n\r\nObtain a list of all existing indexes\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- Index error (402)\r\n    \r\nReturns: \r\n- A tuple containing an Array of all existing index names on the SQLite database, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func existingIndexesForTable(table: String) -> (result: [String], error: Int?)\r\n```\r\n\r\nObtain a list of all existing indexes on a specific table\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- Index error (402)\r\n    \r\nParameters:\r\n- table  -> The name of the table that is being queried for indexes\r\n    \r\nReturns: \r\n- A tuple containing an Array of all existing index names in the table, and an Int with the error code or nil if there was no error\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func transaction(transactionClosure: ()->Bool) -> Int?\r\n```\r\n\r\nExecute commands within a single exclusive transaction\r\n    \r\nA connection to the database is opened and is not closed until the end of the transaction. A transaction cannot be embedded into another transaction or savepoint.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n- Transaction errors (501 - 502)\r\n    \r\nParameters:\r\n- transactionClosure  -> A closure containing commands that will execute as part of a single transaction. If the transactionClosure returns true, the changes made within the closure will be committed. If false, the changes will be rolled back and will not be saved.\r\n    \r\nReturns:\r\n- An Int with the error code, or nil if there was no error committing or rolling back the transaction\r\n\r\n=======================\r\n\r\n***\r\n\r\n```\r\npublic static func savepoint(savepointClosure: ()->Bool) -> Int?\r\n```\r\n\r\nExecute commands within a single savepoint\r\n    \r\nA connection to the database is opened and is not closed until the end of the savepoint (or the end of the last savepoint, if embedded).\r\n    \r\nNOTE: Unlike transactions, savepoints may be embedded into other savepoints or transactions.\r\n\r\nPossible errors returned by this function are:\r\n\r\n- SQLite errors (0 - 101)\r\n    \r\nParameters:\r\n- savepointClosure  -> A closure containing commands that will execute as part of a single savepoint. If the savepointClosure returns true, the changes made within the closure will be released. If false, the changes will be rolled back and will not be saved.\r\n    \r\nReturns: \r\n- An Int with the error code, or nil if there was no error releasing or rolling back the savepoint","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}